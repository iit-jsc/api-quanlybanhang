generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PermissionGroup {
  name        String
  code        String              @unique
  type        PermissionGroupType @default(SHARED)
  permissions Permission[]
}

model Permission {
  name            String
  code            String           @id @unique
  groupCode       String
  permissionGroup PermissionGroup? @relation(fields: [groupCode], references: [code])
  roles           Role[]
}

model BusinessType {
  name        String
  icon        String?
  code        String  @id @unique
  description String? @db.Text
  shops       Shop[]
}

model Role {
  id          String       @id @default(uuid())
  name        String
  description String?      @db.Text
  permissions Permission[]
  shop        Shop?        @relation(fields: [shopId], references: [id])
  shopId      String?
  accounts    Account[]    @relation("roleAccount")
  createdBy   String?
  updatedBy   String?
  creator     Account?     @relation("creator", fields: [createdBy], references: [id])
  updater     Account?     @relation("updater", fields: [updatedBy], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Account {
  id                        String                @id @default(uuid())
  status                    AccountStatus         @default(ACTIVE)
  password                  String?
  userId                    String                @unique
  user                      User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles                     Role[]                @relation("roleAccount")
  branches                  Branch[]
  createdBy                 String?
  updatedBy                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  createOrders              Order[]               @relation("creator")
  updateOrders              Order[]               @relation("updater")
  creatorBranches           Branch[]              @relation("creator")
  updaterBranches           Branch[]              @relation("updater")
  creatorMeasurementUnits   MeasurementUnit[]     @relation("creator")
  updaterMeasurementUnits   MeasurementUnit[]     @relation("updater")
  creatorProductTypes       ProductType[]         @relation("creator")
  updaterProductTypes       ProductType[]         @relation("updater")
  creatorProducts           Product[]             @relation("creator")
  updaterProducts           Product[]             @relation("updater")
  creatorEmployeeGroups     EmployeeGroup[]       @relation("creator")
  updaterEmployeeGroups     EmployeeGroup[]       @relation("updater")
  creatorCustomerTypes      CustomerType[]        @relation("creator")
  updaterCustomerTypes      CustomerType[]        @relation("updater")
  creatorAreas              Area[]                @relation("creator")
  updaterAreas              Area[]                @relation("updater")
  creatorTables             Table[]               @relation("creator")
  updaterTables             Table[]               @relation("updater")
  creatorCustomers          Customer[]            @relation("creator")
  updaterCustomers          Customer[]            @relation("updater")
  creatorUsers              User[]                @relation("creator")
  updaterUsers              User[]                @relation("updater")
  creatorShops              Shop[]                @relation("creator")
  updaterShops              Shop[]                @relation("updater")
  creatorSupplierTypes      SupplierType[]        @relation("creator")
  updaterSupplierTypes      SupplierType[]        @relation("updater")
  creatorSupplier           Supplier[]            @relation("creator")
  updaterSupplier           Supplier[]            @relation("updater")
  creatorVoucher            Voucher[]             @relation("creator")
  updaterVoucher            Voucher[]             @relation("updater")
  creatorOrderDetail        OrderDetail[]         @relation("creator")
  updaterOrderDetail        OrderDetail[]         @relation("updater")
  creatorDiscountIssue      DiscountIssue[]       @relation("creator")
  updaterDiscountIssue      DiscountIssue[]       @relation("updater")
  creatorDiscountCode       DiscountCode[]        @relation("creator")
  updaterDiscountCode       DiscountCode[]        @relation("updater")
  creatorPaymentMethod      PaymentMethod[]       @relation("creator")
  updaterPaymentMethod      PaymentMethod[]       @relation("updater")
  creatorProductOptionGroup ProductOptionGroup[]  @relation("creator")
  updaterProductOptionGroup ProductOptionGroup[]  @relation("updater")
  updaterCustomerRequest    CustomerRequest[]     @relation("updater")
  updaterRole               Role[]                @relation("updater")
  creatorRole               Role[]                @relation("creator")
  trashes                   Trash[]               @relation("creator")
  notifies                  Notify[]
  activityLogs              ActivityLog[]
  canceledOrderDetails      CanceledOrderDetail[] @relation("creator")
  accountSockets            AccountSocket[]
}

model User {
  id              String         @id @default(uuid())
  name            String
  phone           String         @unique
  code            String?        @unique
  email           String?        @unique
  photoURL        String?        @db.Text
  address         String?        @db.Text
  cardId          String?
  cardDate        DateTime?
  cardAddress     String?        @db.Text
  birthday        DateTime?
  sex             SexType?
  startDate       DateTime?
  employeeGroupId String?
  employeeGroup   EmployeeGroup? @relation(fields: [employeeGroupId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       String?
  updatedBy       String?
  creator         Account?       @relation("creator", fields: [createdBy], references: [id])
  updater         Account?       @relation("updater", fields: [updatedBy], references: [id])
  account         Account?
}

model EmployeeGroup {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  users       User[]
  shop        Shop?    @relation(fields: [shopId], references: [id])
  shopId      String?
  createdBy   String?
  updatedBy   String?
  creator     Account? @relation("creator", fields: [createdBy], references: [id])
  updater     Account? @relation("updater", fields: [updatedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shop {
  id               String          @id @default(uuid())
  name             String
  code             String          @unique
  businessTypeCode String
  status           ShopStatus      @default(ACTIVE)
  businessType     BusinessType?   @relation(fields: [businessTypeCode], references: [code])
  phone            String?
  email            String?
  address          String?         @db.Text
  photoURL         String?         @db.Text
  domain           String?         @db.Text
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  branches         Branch[]
  customerTypes    CustomerType[]
  customers        Customer[]
  createdBy        String?
  updatedBy        String?
  creator          Account?        @relation("creator", fields: [createdBy], references: [id])
  updater          Account?        @relation("updater", fields: [updatedBy], references: [id])
  roles            Role[]
  employeeGroups   EmployeeGroup[]
  activityLogs     ActivityLog[]
}

model MeasurementUnit {
  id        String    @id @default(uuid())
  name      String
  code      String
  branch    Branch?   @relation(fields: [branchId], references: [id])
  branchId  String?
  createdBy String?
  updatedBy String?
  creator   Account?  @relation("creator", fields: [createdBy], references: [id])
  updater   Account?  @relation("updater", fields: [updatedBy], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@unique([branchId, code])
}

model ProductType {
  id             String          @id @default(uuid())
  branchId       String
  branch         Branch?         @relation(fields: [branchId], references: [id])
  name           String
  slug           String
  description    String?         @db.Text
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  createdBy      String?
  updatedBy      String?
  creator        Account?        @relation("creator", fields: [createdBy], references: [id])
  updater        Account?        @relation("updater", fields: [updatedBy], references: [id])
  productOptions ProductOption[]

  @@unique([branchId, slug])
}

model Product {
  id                       String             @id @default(uuid())
  branchId                 String
  unitId                   String
  name                     String
  slug                     String
  productTypeId            String
  price                    Float
  code                     String?
  oldPrice                 Float?
  description              String?            @db.Text
  thumbnail                String?            @db.Text
  photoURLs                Json?
  status                   ProductStatus?     @default(SELL_ALLOW)
  productType              ProductType?       @relation(fields: [productTypeId], references: [id])
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  branch                   Branch?            @relation(fields: [branchId], references: [id])
  measurementUnit          MeasurementUnit?   @relation(fields: [unitId], references: [id])
  voucherConditionProducts VoucherCondition[]
  voucherProducts          VoucherProduct[]
  createdBy                String?
  updatedBy                String?
  creator                  Account?           @relation("creator", fields: [createdBy], references: [id])
  updater                  Account?           @relation("updater", fields: [updatedBy], references: [id])
  orderDetails             OrderDetail[]
  productOptions           ProductOption[]

  @@unique([branchId, slug])
  @@unique([branchId, code])
}

model ProductOption {
  id                   String              @id @default(uuid())
  name                 String
  type                 ProductOptionType   @default(APPLY_ALL)
  isDefault            Boolean?            @default(false)
  price                Float
  photoURL             String?             @db.Text
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  productOptionGroup   ProductOptionGroup? @relation(fields: [productOptionGroupId], references: [id], onDelete: Cascade)
  productOptionGroupId String?
  productTypes         ProductType[]
  products             Product[]
}

model ProductOptionGroup {
  id             String          @id @default(uuid())
  name           String
  isMultiple     Boolean?        @default(false)
  isRequired     Boolean?        @default(false)
  productOptions ProductOption[]
  branchId       String
  branch         Branch?         @relation(fields: [branchId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String?
  updatedBy      String?
  creator        Account?        @relation("creator", fields: [createdBy], references: [id])
  updater        Account?        @relation("updater", fields: [updatedBy], references: [id])
}

model CustomerType {
  id           String       @id @default(uuid())
  name         String
  description  String?      @db.Text
  discount     Float        @default(0)
  discountType DiscountType @default(VALUE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  shopId       String
  shop         Shop?        @relation(fields: [shopId], references: [id])
  customers    Customer[]
  createdBy    String?
  updatedBy    String?
  creator      Account?     @relation("creator", fields: [createdBy], references: [id])
  updater      Account?     @relation("updater", fields: [updatedBy], references: [id])
}

model Customer {
  id                  String        @id @default(uuid())
  name                String
  phone               String
  isOrganize          Boolean       @default(false)
  shopId              String
  customerTypeId      String?
  email               String?
  address             String?       @db.Text
  description         String?       @db.Text
  representativeName  String?
  representativePhone String?
  birthday            DateTime?
  discountFor         DiscountFor?  @default(CUSTOMER_TYPE)
  discount            Float         @default(0)
  discountType        DiscountType  @default(VALUE)
  sex                 SexType?
  fax                 String?
  tax                 String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  createdBy           String?
  updatedBy           String?
  shop                Shop?         @relation(fields: [shopId], references: [id])
  customerType        CustomerType? @relation(fields: [customerTypeId], references: [id])
  orders              Order[]
  creator             Account?      @relation("creator", fields: [createdBy], references: [id])
  updater             Account?      @relation("updater", fields: [updatedBy], references: [id])

  @@unique([shopId, phone])
  @@unique([shopId, email])
}

model SupplierType {
  id          String     @id @default(uuid())
  branchId    String
  name        String
  description String?    @db.Text
  createdBy   String?
  updatedBy   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  branch      Branch?    @relation(fields: [branchId], references: [id])
  suppliers   Supplier[]
  creator     Account?   @relation("creator", fields: [createdBy], references: [id])
  updater     Account?   @relation("updater", fields: [updatedBy], references: [id])
}

model Supplier {
  id                  String        @id @default(uuid())
  branchId            String
  name                String
  email               String?
  phone               String
  address             String?       @db.Text
  note                String?       @db.Text
  representativeName  String?
  representativePhone String?
  supplierTypeId      String?
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  branch              Branch?       @relation(fields: [branchId], references: [id])
  supplierType        SupplierType? @relation(fields: [supplierTypeId], references: [id])
  creator             Account?      @relation("creator", fields: [createdBy], references: [id])
  updater             Account?      @relation("updater", fields: [updatedBy], references: [id])

  @@unique([branchId, email])
  @@unique([branchId, phone])
}

model Voucher {
  id              String                  @id @default(uuid())
  branchId        String
  name            String
  startDate       DateTime
  amount          Int
  type            VoucherType
  code            String
  endDate         DateTime?
  amountApplied   Int                     @default(0)
  maxValue        Float?
  isActive        Boolean                 @default(true)
  description     String?                 @db.Text
  discount        Float                   @default(0)
  discountType    DiscountType            @default(VALUE)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  branch          Branch?                 @relation(fields: [branchId], references: [id])
  operator        ConditionOperator       @default(AND)
  conditionGroups VoucherConditionGroup[]
  voucherProducts VoucherProduct[]
  createdBy       String?
  updatedBy       String?
  creator         Account?                @relation("creator", fields: [createdBy], references: [id])
  updater         Account?                @relation("updater", fields: [updatedBy], references: [id])

  @@unique([branchId, code])
}

model VoucherConditionGroup {
  id         String             @id @default(uuid())
  voucherId  String
  operator   ConditionOperator  @default(AND)
  conditions VoucherCondition[] @relation("groupCondition")
  voucher    Voucher?           @relation(fields: [voucherId], references: [id], onDelete: Cascade)
}

model VoucherCondition {
  id                      String                 @id @default(uuid())
  voucherConditionGroupId String
  productId               String?
  product                 Product?               @relation(fields: [productId], references: [id])
  type                    VoucherConditionType
  minQuantity             Int?
  minCustomer             Int?
  minOrderTotal           Float?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  voucherConditionGroup   VoucherConditionGroup? @relation("groupCondition", fields: [voucherConditionGroupId], references: [id], onDelete: Cascade)
}

model VoucherProduct {
  id               String             @id @default(uuid())
  voucherId        String
  productId        String?
  type             VoucherProductType @default(OTHER_PRODUCT)
  amount           Int?
  limitQuantity    Int?
  promotionalPrice Float?
  name             String?            @db.Text
  photoURL         String?            @db.Text
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  voucher          Voucher?           @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  product          Product?           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                    String             @id @default(uuid())
  branchId              String
  code                  String             @unique
  type                  OrderType
  status                OrderStatus
  tableId               String?
  table                 Table?             @relation(fields: [tableId], references: [id])
  customerId            String?
  cancelReason          String?            @db.Text
  cancelDate            DateTime?
  note                  String?            @db.Text
  voucherValue          Float?             @default(0)
  discountCodeValue     Float?             @default(0)
  customerDiscountValue Float?             @default(0)
  moneyReceived         Float?
  paymentMethodId       String?
  orderTotal            Float
  bankingImages         Json?              @default("[]")
  voucherProducts       Json?
  paymentMethod         PaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  isPaid                Boolean?           @default(false)
  isSave                Boolean?           @default(false)
  isDraft               Boolean?           @default(false)
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  paymentAt             DateTime?
  branch                Branch?            @relation(fields: [branchId], references: [id])
  customer              Customer?          @relation(fields: [customerId], references: [id])
  orderDetails          OrderDetail[]
  creator               Account?           @relation("creator", fields: [createdBy], references: [id])
  updater               Account?           @relation("updater", fields: [updatedBy], references: [id])
  vnPayTransactions     VNPayTransaction[]

  @@unique([branchId, code])
}

model OrderDetail {
  id                   String                @id @default(uuid())
  branchId             String
  amount               Float
  orderId              String?
  note                 String?
  status               OrderDetailStatus?    @default(APPROVED)
  productOptions       Json?
  product              Json?
  successAt            DateTime?
  informAt             DateTime?
  processingAt         DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  productOrigin        Product?              @relation(fields: [productOriginId], references: [id])
  productOriginId      String?
  branch               Branch?               @relation(fields: [branchId], references: [id])
  order                Order?                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  table                Table?                @relation(fields: [tableId], references: [id])
  tableId              String?
  createdBy            String?
  updatedBy            String?
  creator              Account?              @relation("creator", fields: [createdBy], references: [id])
  updater              Account?              @relation("updater", fields: [updatedBy], references: [id])
  canceledOrderDetails CanceledOrderDetail[]
}

model CanceledOrderDetail {
  id            String       @id @default(uuid())
  orderDetailId String
  orderDetail   OrderDetail? @relation(fields: [orderDetailId], references: [id], onDelete: Cascade)
  amount        Float
  cancelReason  String?
  createdAt     DateTime     @default(now())
  createdBy     String?
  creator       Account?     @relation("creator", fields: [createdBy], references: [id])
}

model Area {
  id        String   @id @unique @default(uuid())
  branchId  String
  name      String
  photoURL  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch?  @relation(fields: [branchId], references: [id])
  tables    Table[]
  createdBy String?
  updatedBy String?
  creator   Account? @relation("creator", fields: [createdBy], references: [id])
  updater   Account? @relation("updater", fields: [updatedBy], references: [id])
}

model Table {
  id                String             @id @default(uuid())
  branchId          String
  areaId            String
  name              String
  seat              Int?
  orderDetails      OrderDetail[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  branch            Branch?            @relation(fields: [branchId], references: [id])
  area              Area?              @relation(fields: [areaId], references: [id], onDelete: Cascade)
  createdBy         String?
  updatedBy         String?
  creator           Account?           @relation("creator", fields: [createdBy], references: [id])
  updater           Account?           @relation("updater", fields: [updatedBy], references: [id])
  customerRequests  CustomerRequest[]
  orders            Order[]
  vnPayTransactions VNPayTransaction[]
}

model DiscountIssue {
  id            String         @id @default(uuid())
  branchId      String
  name          String
  code          String
  isLimit       Boolean        @default(false)
  discount      Float          @default(0)
  discountType  DiscountType   @default(VALUE)
  startDate     DateTime
  endDate       DateTime?
  description   String?        @db.Text
  amount        Int?
  minOrderTotal Float?
  maxValue      Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  branch        Branch?        @relation(fields: [branchId], references: [id])
  discountCodes DiscountCode[]
  createdBy     String?
  updatedBy     String?
  creator       Account?       @relation("creator", fields: [createdBy], references: [id])
  updater       Account?       @relation("updater", fields: [updatedBy], references: [id])

  @@unique([branchId, code])
}

model DiscountCode {
  id              String         @id @default(uuid())
  branchId        String
  code            String
  isUsed          Boolean        @default(false)
  discountIssueId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  branch          Branch?        @relation(fields: [branchId], references: [id])
  discountIssue   DiscountIssue? @relation(fields: [discountIssueId], references: [id])
  createdBy       String?
  updatedBy       String?
  creator         Account?       @relation("creator", fields: [createdBy], references: [id])
  updater         Account?       @relation("updater", fields: [updatedBy], references: [id])

  @@unique([branchId, code])
}

model CustomerRequest {
  id          String         @id @default(uuid())
  branchId    String
  code        String?
  tableId     String
  requestType RequestType
  content     String         @db.Text
  status      RequestStatus? @default(PENDING)
  updatedBy   String?
  updater     Account?       @relation("updater", fields: [updatedBy], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  branch      Branch?        @relation(fields: [branchId], references: [id])
  table       Table?         @relation(fields: [tableId], references: [id])
}

model Branch {
  id                  String               @id @default(uuid())
  name                String
  shopId              String
  shop                Shop?                @relation(fields: [shopId], references: [id])
  photoURL            String?              @db.Text
  bannerURL           String?              @db.Text
  address             String?              @db.Text
  phone               String?
  expiryAt            DateTime? 
  createdBy           String?
  updatedBy           String?
  creator             Account?             @relation("creator", fields: [createdBy], references: [id])
  updater             Account?             @relation("updater", fields: [updatedBy], references: [id])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  measurementUnits    MeasurementUnit[]
  productTypes        ProductType[]
  products            Product[]
  supplierTypes       SupplierType[]
  suppliers           Supplier[]
  vouchers            Voucher[]
  orders              Order[]
  areas               Area[]
  discountIssues      DiscountIssue[]
  discountCodes       DiscountCode[]
  orderDetails        OrderDetail[]
  customerRequests    CustomerRequest[]
  tables              Table[]
  accounts            Account[]
  paymentMethods      PaymentMethod[]
  productOptionGroups ProductOptionGroup[]
  activityLogs        ActivityLog[]
  accountSockets      AccountSocket[]
  vnPayMerchants      VNPayMerchant[]
}

model AccountSocket {
  socketId  String   @unique
  deviceId  String   @unique
  branchId  String
  branch    Branch?  @relation(fields: [branchId], references: [id])
  account   Account? @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime @default(now())
}

model PaymentMethod {
  id             String            @id @default(uuid())
  branchId       String
  branch         Branch?           @relation(fields: [branchId], references: [id])
  bankName       String?
  bankCode       String?
  representative String?
  photoURL       String?
  type           PaymentMethodType
  active         Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdBy      String?
  updatedBy      String?
  creator        Account?          @relation("creator", fields: [createdBy], references: [id])
  updater        Account?          @relation("updater", fields: [updatedBy], references: [id])
  orders         Order[]

  @@unique([type, branchId])
}

model Trash {
  id         String   @id @default(uuid())
  modelName  String
  data       Json
  deletedAt  DateTime @default(now())
  isRestored Boolean  @default(false)
  createdBy  String?
  creator    Account? @relation("creator", fields: [createdBy], references: [id])
}

model Notify {
  id        String     @id @default(uuid())
  content   String
  type      NotifyType
  accounts  Account[]
  isRead    Boolean    @default(false)
  createdAt DateTime   @default(now())
}

model ActivityLog {
  id           String         @id @default(uuid())
  action       ActivityAction
  modelName    String
  targetId     String?
  targetName   String
  relatedName  String?
  relatedModel String?
  accountId    String
  account      Account?       @relation(fields: [accountId], references: [id])
  branchId     String?
  branch       Branch?        @relation(fields: [branchId], references: [id])
  shopId       String?
  shop         Shop?          @relation(fields: [shopId], references: [id])
  createdAt    DateTime       @default(now())
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  GENERATE_DISCOUNT_CODES
  PAYMENT
  CANCEL_ORDER
  UPDATE_PAYMENT_METHOD
  SEPARATE_TABLE
}

enum NotifyType {
  APPROVED_DISH
  PROCESSING_DISH
  INFORMED_DISH
  SUCCESS_DISH
  CANCEL_DISH
  PAYMENT_REQUEST
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum ShopStatus {
  ACTIVE
  INACTIVE
}

enum ProductStatus {
  SELL_ALLOW
  NOT_SELL_ALLOW
}

enum SexType {
  MALE
  FEMALE
  OTHER
}

enum DiscountType {
  PERCENT
  VALUE
}

enum DiscountFor {
  CUSTOMER_TYPE
  CUSTOMER
}

enum RequestType {
  CALL_STAFF
  PAYMENT
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
}

enum PaymentMethodType {
  BANKING
  CASH
  VNPAY
}

enum VoucherType {
  VALUE
  PRODUCT
}

enum OrderType {
  TAKE_AWAY
  ONLINE
  OFFLINE
}

enum OrderStatus {
  WAITING
  APPROVED
  TRANSPORTING
  SUCCESS
  CANCELLED
}

enum OrderDetailStatus {
  APPROVED
  INFORMED // đã báo xuống bếp (chờ bếp nhận món)
  PROCESSING // phụ bếp đã chuyển cho bếp chế biến
  SUCCESS // Món đã phục vụ
}

enum PermissionGroupType {
  FOOD_BEVERAGE
  FASHION
  SHARED
}

enum VoucherProductType {
  SHOP_PRODUCT
  OTHER_PRODUCT
  DISCOUNT_PRODUCT
}

enum VoucherConditionType {
  MIN_CUSTOMER
  MIN_ORDER_TOTAL
  MIN_PRODUCT_QUANTITY
}

enum ConditionOperator {
  AND
  OR
}

enum ProductOptionType {
  APPLY_ALL
  EXCLUDE
  INCLUDE
}

enum TransactionStatus {
  SUCCESS
  PENDING
  FAILED
}

model VNPayTransaction {
  id        String            @id @default(uuid())
  orderId   String
  tableId   String
  vnpTxnRef String            @unique
  createdAt DateTime          @default(now())
  status    TransactionStatus @default(PENDING)
  order     Order?            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  table     Table?            @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model VNPayMerchant {
  id            String   @id @default(uuid())
  branchId      String   @unique
  createdAt     DateTime @default(now())
  merchantName  String
  merchantType  String
  merchantCode String
  terminalId    String
  secretKey     String
  branch        Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade)
}
