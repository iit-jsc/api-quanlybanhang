import { PrismaClient, DiscountType, SexType } from '@prisma/client'

const prisma = new PrismaClient()

// D·ªØ li·ªáu m·∫´u cho CustomerType
const customerTypesData = [
  {
    name: 'Kh√°ch VIP',
    description: 'Kh√°ch h√†ng th√¢n thi·∫øt, mua h√†ng th∆∞·ªùng xuy√™n',
    discount: 15,
    discountType: DiscountType.PERCENT
  },
  {
    name: 'Kh√°ch h√†ng th∆∞·ªùng',
    description: 'Kh√°ch h√†ng m·ªõi, mua h√†ng l·∫ßn ƒë·∫ßu',
    discount: 0,
    discountType: DiscountType.PERCENT
  },
  {
    name: 'Kh√°ch h√†ng doanh nghi·ªáp',
    description: 'Kh√°ch h√†ng l√† doanh nghi·ªáp, c√¥ng ty',
    discount: 20,
    discountType: DiscountType.PERCENT
  },
  {
    name: 'Kh√°ch h√†ng b·∫°c',
    description: 'Kh√°ch h√†ng chi ti√™u t·ª´ 5-10 tri·ªáu/th√°ng',
    discount: 5,
    discountType: DiscountType.PERCENT
  },
  {
    name: 'Kh√°ch h√†ng v√†ng',
    description: 'Kh√°ch h√†ng chi ti√™u t·ª´ 10-20 tri·ªáu/th√°ng',
    discount: 10,
    discountType: DiscountType.PERCENT
  }
]

// D·ªØ li·ªáu random cho Customer
const firstNames = [
  'Nguy·ªÖn',
  'Tr·∫ßn',
  'L√™',
  'Ph·∫°m',
  'Ho√†ng',
  'Hu·ª≥nh',
  'Phan',
  'V≈©',
  'V√µ',
  'ƒê·∫∑ng',
  'B√πi',
  'ƒê·ªó',
  'H·ªì',
  'Ng√¥',
  'D∆∞∆°ng',
  'L√Ω',
  'ƒêinh',
  'ƒê√†o',
  'Mai',
  'L∆∞u'
]

const lastNames = [
  'VƒÉn Anh',
  'Th·ªã B√≠ch',
  'VƒÉn C∆∞·ªùng',
  'Th·ªã Dung',
  'VƒÉn ƒê·ª©c',
  'Th·ªã Hoa',
  'VƒÉn H√πng',
  'Th·ªã Lan',
  'VƒÉn Long',
  'Th·ªã Mai',
  'VƒÉn Nam',
  'Th·ªã Nga',
  'VƒÉn Ph√∫',
  'Th·ªã Qu·ª≥nh',
  'VƒÉn S∆°n',
  'Th·ªã T√¢m',
  'VƒÉn Tu·∫•n',
  'Th·ªã Uy√™n',
  'VƒÉn Vi·ªát',
  'Th·ªã Y·∫øn'
]

const addresses = [
  '123 Nguy·ªÖn VƒÉn C·ª´, Q.5, TP.HCM',
  '456 L√™ L·ª£i, Q.1, TP.HCM',
  '789 Tr·∫ßn H∆∞ng ƒê·∫°o, Q.10, TP.HCM',
  '321 V√µ Th·ªã S√°u, Q.3, TP.HCM',
  '654 Pasteur, Q.1, TP.HCM',
  '987 ƒêi·ªán Bi√™n Ph·ªß, Q.B√¨nh Th·∫°nh, TP.HCM',
  '147 Nguy·ªÖn ƒê√¨nh Chi·ªÉu, Q.3, TP.HCM',
  '258 L√Ω T·ª± Tr·ªçng, Q.1, TP.HCM',
  '369 Hai B√† Tr∆∞ng, Q.1, TP.HCM',
  '741 Nguy·ªÖn Th·ªã Minh Khai, Q.3, TP.HCM'
]

const companies = [
  'C√¥ng ty TNHH ABC',
  'C√¥ng ty C·ªï ph·∫ßn XYZ',
  'Doanh nghi·ªáp t∆∞ nh√¢n DEF',
  'C√¥ng ty TNHH MTV GHI',
  'T·∫≠p ƒëo√†n JKL',
  'C√¥ng ty C·ªï ph·∫ßn MNO',
  'C√¥ng ty TNHH PQR',
  'Doanh nghi·ªáp STU',
  'C√¥ng ty VWX',
  'T·ªïng c√¥ng ty YZ'
]

// Function t·∫°o s·ªë ƒëi·ªán tho·∫°i random
function generatePhoneNumber(): string {
  const prefixes = ['090', '091', '094', '083', '084', '085', '081', '082']
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)]
  const suffix = Math.floor(Math.random() * 10000000)
    .toString()
    .padStart(7, '0')
  return prefix + suffix
}

// Function t·∫°o email random
function generateEmail(name: string): string {
  const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com']
  const domain = domains[Math.floor(Math.random() * domains.length)]
  const cleanName = name
    .toLowerCase()
    .replace(/\s+/g, '')
    .replace(/[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ]/g, 'a')
    .replace(/[√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ]/g, 'e')
    .replace(/[√¨√≠·ªã·ªâƒ©]/g, 'i')
    .replace(/[√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°]/g, 'o')
    .replace(/[√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ]/g, 'u')
    .replace(/[·ª≥√Ω·ªµ·ª∑·ªπ]/g, 'y')
    .replace(/[ƒë]/g, 'd')
  return `${cleanName}${Math.floor(Math.random() * 1000)}@${domain}`
}

// Function t·∫°o m√£ thu·∫ø random
function generateTaxCode(): string {
  return Math.floor(Math.random() * 9000000000 + 1000000000).toString()
}

// Function t·∫°o ng√†y sinh random
function generateBirthday(): Date {
  const start = new Date(1970, 0, 1)
  const end = new Date(2005, 0, 1)
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))
}

async function main() {
  console.log('üå± Starting customer seeding...')

  // L·∫•y t·∫•t c·∫£ c√°c shop c√≥ s·∫µn
  const shops = await prisma.shop.findMany({
    select: { id: true, name: true }
  })

  if (shops.length === 0) {
    console.log('‚ùå No shops found. Please seed shops first.')
    return
  }

  console.log(`üìä Found ${shops.length} shops`)

  // Seed CustomerTypes cho m·ªói shop
  console.log('üè∑Ô∏è Creating customer types...')
  const createdCustomerTypes: { [shopId: string]: any[] } = {}

  for (const shop of shops) {
    console.log(`  Creating customer types for shop: ${shop.name}`)

    const customerTypes = []
    for (const customerTypeData of customerTypesData) {
      const customerType = await prisma.customerType.upsert({
        where: {
          shopId_name: {
            shopId: shop.id,
            name: customerTypeData.name
          }
        },
        update: customerTypeData,
        create: {
          ...customerTypeData,
          shopId: shop.id
        }
      })
      customerTypes.push(customerType)
    }
    createdCustomerTypes[shop.id] = customerTypes
    console.log(`  ‚úÖ Created ${customerTypes.length} customer types for ${shop.name}`)
  }

  // Seed Customers cho m·ªói shop
  console.log('üë• Creating customers...')
  let totalCustomers = 0

  for (const shop of shops) {
    console.log(`  Creating customers for shop: ${shop.name}`)
    const customerTypes = createdCustomerTypes[shop.id]

    // T·∫°o 15-25 customers cho m·ªói shop
    const customerCount = Math.floor(Math.random() * 11) + 15

    for (let i = 0; i < customerCount; i++) {
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)]
      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)]
      const fullName = `${firstName} ${lastName}`

      const isOrganize = Math.random() < 0.3 // 30% l√† t·ªï ch·ª©c
      const customerType = customerTypes[Math.floor(Math.random() * customerTypes.length)]
      const customerData = {
        code: `KH${shop.name.substring(0, 2).toUpperCase()}${(i + 1).toString().padStart(4, '0')}`,
        name: isOrganize ? companies[Math.floor(Math.random() * companies.length)] : fullName,
        phone: generatePhoneNumber(),
        organizeName: isOrganize ? companies[Math.floor(Math.random() * companies.length)] : null,
        isOrganize,
        shopId: shop.id,
        customerTypeId: customerType.id,
        email: generateEmail(
          isOrganize ? companies[Math.floor(Math.random() * companies.length)] : fullName
        ),
        address: addresses[Math.floor(Math.random() * addresses.length)],
        description: isOrganize
          ? 'Kh√°ch h√†ng doanh nghi·ªáp'
          : `Kh√°ch h√†ng c√° nh√¢n - ${customerType.name}`,
        birthday: isOrganize ? null : generateBirthday(),
        sex: isOrganize
          ? null
          : (Object.values(SexType)[
              Math.floor(Math.random() * Object.values(SexType).length)
            ] as SexType),
        tax: isOrganize ? generateTaxCode() : null
      }

      try {
        await prisma.customer.create({
          data: customerData
        })
        totalCustomers++
      } catch (error) {
        // B·ªè qua l·ªói duplicate v√† th·ª≠ l·∫°i v·ªõi phone kh√°c
        if (error instanceof Error && error.message.includes('Unique constraint')) {
          customerData.phone = generatePhoneNumber()
          customerData.email = generateEmail(customerData.name)
          try {
            await prisma.customer.create({
              data: customerData
            })
            totalCustomers++
          } catch (secondError) {
            console.warn(`    ‚ö†Ô∏è Failed to create customer ${customerData.name}: ${secondError}`)
          }
        } else {
          console.warn(`    ‚ö†Ô∏è Failed to create customer ${customerData.name}: ${error}`)
        }
      }
    }

    console.log(`  ‚úÖ Created customers for ${shop.name}`)
  }

  console.log(`üéâ Customer seeding completed!`)
  console.log(`üìä Summary:`)
  console.log(`   - Shops processed: ${shops.length}`)
  console.log(`   - Customer types created: ${Object.values(createdCustomerTypes).flat().length}`)
  console.log(`   - Customers created: ${totalCustomers}`)
}

main()
  .then(() => {
    // console.log("Seeding completed!");
  })
  .catch(e => {
    console.error(e)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
